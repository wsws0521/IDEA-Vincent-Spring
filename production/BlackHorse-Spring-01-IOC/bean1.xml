<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	
	<!-- 该方式实例化 是通过类中的 无参构造 -->
	<!-- 如果类中默认构造函数被 重写为有参，则无法实例化，不过可以再专门写个无参构造 -->
	<!-- id属性=name属性, name为了整合Struts1里action名称特殊符号而存在，现在弃用 -->
	<!-- scope属性：默认singleton（单例）、prototype（多例）、request（创建完存入request域）、session（创建完存入session域）、globalSession（创建完存入globalSession域，单点登录） -->
    <bean id="user" class="cn.itcast.ioc.User">
<!--         <meta key="cacheName" value="foo"/>
        <property name="name" value="Rick"/> -->
    </bean>

	<!-- 静态工厂的方式实例化类 -->
	<bean id="user2" class="cn.itcast.ioc.User2Factory" factory-method="getUser2"></bean>

	<!-- 实例工厂的方式实例化类 -->
	<bean id="user3Factory" class="cn.itcast.ioc.User3Factory"></bean>
	<bean id="user3" factory-bean="user3Factory" factory-method="getUser3"></bean>

	<!-- 通过类中的有参构造注入属性 -->
	<bean id="propertyDemo1" class="cn.itcast.property.PropertyDemo1">
		<constructor-arg name="username" value="小王小马"></constructor-arg>
	</bean>
	<!-- 通过类中的setter注入属性值 -->
	<bean id="propertyDemo2" class="cn.itcast.property.PropertyDemo2">
		<property name="username" value="小吴小付"></property>
	</bean>
<!--	&lt;!&ndash; 通过类中的setter注入  对象  属性 &ndash;&gt;-->
<!--	<bean id="userdao" class="cn.itcast.property.ref.UserDao"></bean>-->
<!--	<bean id="userservice" class="cn.itcast.property.ref.UserService">-->
<!--		<property name="userDao" ref="userdao"></property>-->
<!--	</bean>-->
<!--	&lt;!&ndash; 利用【p名称空间】注入属性 &ndash;&gt;-->
<!--	&lt;!&ndash; xmlns:p="http://www.springframework.org/schema/p" &ndash;&gt;-->
<!--	<bean id="propertyDemo3" class="cn.itcast.property.PropertyDemo3" p:name="Vincent">-->
<!--		&lt;!&ndash; array &ndash;&gt;-->
<!--		<property name="arrs">-->
<!--			<list>-->
<!--				<value>小王</value>-->
<!--				<value>小马</value>-->
<!--				<value>小畜生</value>-->
<!--			</list>-->
<!--		</property>-->
<!--		&lt;!&ndash; list &ndash;&gt;-->
<!--		<property name="list">-->
<!--			<list>-->
<!--				<value>小王list</value>-->
<!--				<value>小马list</value>-->
<!--				<value>小畜生list</value>-->
<!--			</list>-->
<!--		</property>-->
<!--		&lt;!&ndash; map &ndash;&gt;-->
<!--		<property name="map">-->
<!--			<map>-->
<!--				<entry key="a" value="小王"></entry>-->
<!--				<entry key="b" value="小马"></entry>-->
<!--				<entry key="c" value="小畜生"></entry>-->
<!--			</map>-->
<!--		</property>-->
<!--		&lt;!&ndash; properties &ndash;&gt;-->
<!--		<property name="prop">-->
<!--			<props>-->
<!--				<prop key="diverclass">com.mysql.jdbc.Driver</prop>-->
<!--				<prop key="username">root</prop>-->
<!--			</props>-->
<!--		</property>-->
<!--	</bean>-->
<!--	&lt;!&ndash; 总结：IOC控制反转=创建bean对象，DI依赖注入依存于IOC &ndash;&gt;-->
<!--	-->
	
	
</beans>
